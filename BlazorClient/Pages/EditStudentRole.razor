@page "/editstudents/{Id}"
@inject HttpClient httpClient
@inject NavigationManager navigationManager

<h1>Edit Student</h1>

<EditForm Model="@student" OnValidSubmit="@updateOffering">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-elements">
        <label for="StudentID">Student ID:</label>
        <p>@student.Id</p>
    </div>
    <div class="form-elements">
        <label for="StudentEmail">Student Email:</label>
        <p>@student.Email</p>
    </div>
    <div class="form-elements">
        <label for="StudentName">Student Name:</label>
        <p>@student.FirstName @student.LastName </p>
    </div>

    <div class="form-elements">
        <label for="StudentEnrollment">Student Enrollments:</label>
        @if(student.Enrollments != null)
        {
            @foreach (var item in student.Enrollments)
            {
                <p>@item.Offering.Course.CourseTitle @item.Offering.Semester</p>
            }
        }
    </div>

    <div class="form-elements">
        <label for="StudentOffering">Student's Offering</label>
        <InputSelect id="offering" @bind-Value="OfferingId">
            @if(offering != null) {
                @foreach (var item in offering)
                {
                    <option value="@item.OfferingId">@item.Course.CourseTitle @item.Semester</option>
                }
            }
        </InputSelect>
    </div>
    <button type="submit" class="btn btn-success">Submit</button>
</EditForm>

@code {
    public string OfferingId { get; set; }
    private async void updateOffering()
    {
        string endpoint = $"{baseUrl}api/Student/{student.Id}";
        await httpClient.PutAsJsonAsync(endpoint, student);
        StateHasChanged();
        navigationManager.NavigateTo("/studentlist");
    }
}


@functions {
    string baseUrl = "https://localhost:5001/";
    private ApplicationUser student = new ApplicationUser();
    ApplicationUser s;

    Offering[] offering;

    [Parameter]
    public string Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await load(Id);
        await loadOffering();
    }

    protected async Task load(string id)
    {
        s = await httpClient.GetFromJsonAsync<ApplicationUser>($"{baseUrl}api/Student/{id}");
        student.FirstName = s.FirstName;
        student.LastName = s.LastName;
        student.Id = s.Id;
        student.Email = s.Email;
        student.Enrollments = s.Enrollments;
        StateHasChanged();
    }

    protected async Task loadOffering()
    {
        offering = await httpClient.GetFromJsonAsync<Offering[]>($"{baseUrl}api/Offering");
        StateHasChanged();
    }
} 