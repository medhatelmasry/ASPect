// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Web.Data;

namespace Web.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210415092807_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.4");

            modelBuilder.Entity("ASPectLibrary.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "fe7dce26-ec5d-452a-8d5b-db9fdf6c7de8",
                            ConcurrencyStamp = "fe7dce26-ec5d-452a-8d5b-db9fdf6c7de8",
                            CreatedDate = new DateTime(2021, 4, 15, 2, 28, 6, 608, DateTimeKind.Local).AddTicks(7619),
                            Description = "This is the administrator role.",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "6fe5c0a6-9713-43c2-90e2-a1bbdc670580",
                            ConcurrencyStamp = "6fe5c0a6-9713-43c2-90e2-a1bbdc670580",
                            CreatedDate = new DateTime(2021, 4, 15, 2, 28, 6, 611, DateTimeKind.Local).AddTicks(4627),
                            Description = "This is the instructor role.",
                            Name = "Instructor",
                            NormalizedName = "INSTRUCTOR"
                        },
                        new
                        {
                            Id = "c5b86ef1-3114-4dc7-a061-1bc704939396",
                            ConcurrencyStamp = "c5b86ef1-3114-4dc7-a061-1bc704939396",
                            CreatedDate = new DateTime(2021, 4, 15, 2, 28, 6, 611, DateTimeKind.Local).AddTicks(4716),
                            Description = "This is the student role.",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("ASPectLibrary.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "5bb3f1ca-d27c-4655-b8d6-6c2b3016f2d3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "48688e7b-b728-48d2-8d8e-67679dd63b10",
                            Email = "admin@aspect.com",
                            EmailConfirmed = true,
                            FirstName = "Adam",
                            LastName = "Aldridge",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@ASPECT.COM",
                            NormalizedUserName = "ADMIN@ASPECT.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC4KYrFMRS24TpW9CrSSgWatMbnxpj2aziAZtWuDJi5A326YIFj6A9mplLx8x/vzlQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f7bfa6a4-2c8a-4acd-a3b3-df2d09d5840c",
                            TwoFactorEnabled = false,
                            UserName = "admin@aspect.com"
                        },
                        new
                        {
                            Id = "9216a976-f1ba-4d73-aff6-f818b4b5c6a7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e98d12a6-4d42-428b-b90f-d2878c2948e9",
                            Email = "instructor@aspect.com",
                            EmailConfirmed = true,
                            FirstName = "Ted",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "INSTRUCTOR@ASPECT.COM",
                            NormalizedUserName = "INSTRUCTOR@ASPECT.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPmYiHoZ3fYa77n7xXfKoFy36Y+wqnWM9yprZHUpjmtB/wggPHN/QBYTa+WajUkrDg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9df3d1ff-e6e6-4d2c-9604-38c22d1d7dd6",
                            TwoFactorEnabled = false,
                            UserName = "instructor@aspect.com"
                        },
                        new
                        {
                            Id = "363624a6-0978-4866-b5ee-b135a6fc3870",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d559f32b-e4c5-47bb-8aca-dd5136350034",
                            Email = "student@aspect.com",
                            EmailConfirmed = true,
                            FirstName = "Mike",
                            LastName = "Myers",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT@ASPECT.COM",
                            NormalizedUserName = "STUDENT@ASPECT.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECPFMa0zJ2QTFbXdrZMiPaIbq+VGmbI74gOFWHJyphJBJcZBZdxYcSkl4nsOEuSqXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b4798073-7f0e-4b15-a372-c7bd7f392639",
                            TwoFactorEnabled = false,
                            UserName = "student@aspect.com"
                        },
                        new
                        {
                            Id = "363624a6-1111-4866-b5ee-b135a6fc3870",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5faff30e-6150-4063-bbe5-e8db0760ad88",
                            Email = "student2@aspect.com",
                            EmailConfirmed = true,
                            FirstName = "Mike2",
                            LastName = "Myers2",
                            LockoutEnabled = false,
                            NormalizedEmail = "STUDENT2@ASPECT.COM",
                            NormalizedUserName = "STUDENT2@ASPECT.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEGM7pkjl4fKnIaSKhoRFiD7xF4YU6TbNExCtf0PiUc/2cYRRzo6lFPXgrleVKZf7JQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9ac275cf-3607-4cc8-8354-a19bfc6ce5da",
                            TwoFactorEnabled = false,
                            UserName = "student2@aspect.com"
                        });
                });

            modelBuilder.Entity("ASPectLibrary.Assignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("courseId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.HasKey("AssignmentId");

                    b.HasIndex("courseId");

                    b.ToTable("Assignments");

                    b.HasData(
                        new
                        {
                            AssignmentId = 1,
                            DateCreated = new DateTime(2021, 4, 15, 2, 28, 6, 646, DateTimeKind.Local).AddTicks(1754),
                            DueDate = new DateTime(2021, 4, 22, 2, 28, 6, 646, DateTimeKind.Local).AddTicks(2042),
                            courseId = 1,
                            description = "Create a CRUD application"
                        });
                });

            modelBuilder.Entity("ASPectLibrary.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CourseTitle")
                        .HasColumnType("TEXT");

                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("InstructorID")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectOutline")
                        .HasColumnType("TEXT");

                    b.Property<string>("Term")
                        .HasColumnType("TEXT");

                    b.HasKey("CourseID");

                    b.HasIndex("Id");

                    b.ToTable("Course");

                    b.HasData(
                        new
                        {
                            CourseID = 1,
                            CourseTitle = "COMP3800 - Practicum",
                            InstructorID = "9216a976-f1ba-4d73-aff6-f818b4b5c6a7",
                            ProjectOutline = "https://www.bcit.ca/outlines/20211088135/",
                            Term = "4"
                        },
                        new
                        {
                            CourseID = 2,
                            CourseTitle = "COMP4870 - Intranet Planning & Development",
                            InstructorID = "9216a976-f1ba-4d73-aff6-f818b4b5c6a7",
                            ProjectOutline = "https://www.bcit.ca/outlines/20211049852/",
                            Term = "4"
                        });
                });

            modelBuilder.Entity("ASPectLibrary.Enrollment", b =>
                {
                    b.Property<int>("EnrollmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CourseID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("OfferingId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EnrollmentId");

                    b.HasIndex("CourseID");

                    b.HasIndex("Id");

                    b.HasIndex("OfferingId");

                    b.ToTable("Enrollments");

                    b.HasData(
                        new
                        {
                            EnrollmentId = 1,
                            Id = "363624a6-0978-4866-b5ee-b135a6fc3870",
                            OfferingId = 1
                        },
                        new
                        {
                            EnrollmentId = 3,
                            Id = "363624a6-0978-4866-b5ee-b135a6fc3870",
                            OfferingId = 2
                        });
                });

            modelBuilder.Entity("ASPectLibrary.Membership", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CourseID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProjectRole")
                        .HasColumnType("TEXT");

                    b.HasKey("Id", "ProjectId");

                    b.HasIndex("CourseID");

                    b.HasIndex("ProjectId");

                    b.ToTable("Memberships");

                    b.HasData(
                        new
                        {
                            Id = "363624a6-0978-4866-b5ee-b135a6fc3870",
                            ProjectId = 1,
                            ProjectRole = "Project Manager"
                        },
                        new
                        {
                            Id = "363624a6-1111-4866-b5ee-b135a6fc3870",
                            ProjectId = 1,
                            ProjectRole = "Database Administrator"
                        },
                        new
                        {
                            Id = "363624a6-0978-4866-b5ee-b135a6fc3870",
                            ProjectId = 2,
                            ProjectRole = "Project Manager"
                        });
                });

            modelBuilder.Entity("ASPectLibrary.Offering", b =>
                {
                    b.Property<int>("OfferingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CourseID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Semester")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Year")
                        .HasColumnType("TEXT");

                    b.HasKey("OfferingId");

                    b.HasIndex("CourseID");

                    b.HasIndex("Id");

                    b.ToTable("Offerings");

                    b.HasData(
                        new
                        {
                            OfferingId = 1,
                            CourseID = 2,
                            Id = "9216a976-f1ba-4d73-aff6-f818b4b5c6a7",
                            Semester = "Fall",
                            Year = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            OfferingId = 2,
                            CourseID = 1,
                            Id = "9216a976-f1ba-4d73-aff6-f818b4b5c6a7",
                            Semester = "Winter",
                            Year = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("ASPectLibrary.PeerEvaluation", b =>
                {
                    b.Property<int>("PeerEvaluationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comments")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Rating")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserBeingEvaluatedId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserEvaluatingId")
                        .HasColumnType("TEXT");

                    b.HasKey("PeerEvaluationId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserBeingEvaluatedId");

                    b.HasIndex("UserEvaluatingId");

                    b.ToTable("PeerEvaluations");
                });

            modelBuilder.Entity("ASPectLibrary.ProgressUpdate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Complete")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Issues")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastWeekActivity")
                        .HasColumnType("TEXT");

                    b.Property<string>("NextWeekActivity")
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProgressUpdates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Complete = false,
                            Date = new DateTime(2021, 4, 15, 2, 28, 6, 644, DateTimeKind.Local).AddTicks(380),
                            Issues = "Schema may need to be reworked",
                            LastWeekActivity = "Finished DB Design",
                            NextWeekActivity = "Going to work on the API",
                            ProjectId = 1
                        },
                        new
                        {
                            Id = 2,
                            Complete = false,
                            Date = new DateTime(2021, 4, 15, 2, 28, 6, 644, DateTimeKind.Local).AddTicks(1653),
                            Issues = "Need to find solution for deployment",
                            LastWeekActivity = "Finished API Design",
                            NextWeekActivity = "Going to implement the API",
                            ProjectId = 1
                        });
                });

            modelBuilder.Entity("ASPectLibrary.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AppName")
                        .HasColumnType("TEXT");

                    b.Property<string>("AspNetUserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("OfferingId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectCategoryId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TeamName")
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectId");

                    b.HasIndex("OfferingId");

                    b.HasIndex("ProjectCategoryId");

                    b.ToTable("Project");

                    b.HasData(
                        new
                        {
                            ProjectId = 1,
                            AppName = "Twitter",
                            AspNetUserId = "363624a6-0978-4866-b5ee-b135a6fc3870",
                            Description = "An app for tweeting",
                            OfferingId = 1,
                            ProjectCategoryId = 1,
                            TeamName = "RA"
                        },
                        new
                        {
                            ProjectId = 2,
                            AppName = "PlaneGo",
                            AspNetUserId = "363624a6-0978-4866-b5ee-b135a6fc3870",
                            Description = "It's like uber but for planes",
                            OfferingId = 1,
                            ProjectCategoryId = 2,
                            TeamName = "Team Fly"
                        },
                        new
                        {
                            ProjectId = 3,
                            AppName = "PlaneGo",
                            AspNetUserId = "363624a6-0978-4866-b5ee-b135a6fc3870",
                            Description = "It's like uber but for planes",
                            OfferingId = 2,
                            ProjectCategoryId = 2,
                            TeamName = "Team Fly"
                        });
                });

            modelBuilder.Entity("ASPectLibrary.ProjectCategory", b =>
                {
                    b.Property<int>("ProjectCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ProjectCategoryName")
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectCategoryId");

                    b.ToTable("ProjectCategory");

                    b.HasData(
                        new
                        {
                            ProjectCategoryId = 1,
                            ProjectCategoryName = "Blockchain"
                        },
                        new
                        {
                            ProjectCategoryId = 2,
                            ProjectCategoryName = "React"
                        });
                });

            modelBuilder.Entity("ASPectLibrary.ProjectRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssignmentId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Requirement")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssignmentId");

                    b.ToTable("ProjectRequirements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AssignmentId = 1,
                            DateCreated = new DateTime(2021, 4, 15, 2, 28, 6, 646, DateTimeKind.Local).AddTicks(5798),
                            DueDate = new DateTime(2021, 4, 18, 2, 28, 6, 646, DateTimeKind.Local).AddTicks(6092),
                            Requirement = "Setup a WebAPI"
                        },
                        new
                        {
                            Id = 2,
                            AssignmentId = 1,
                            DateCreated = new DateTime(2021, 4, 15, 2, 28, 6, 646, DateTimeKind.Local).AddTicks(6858),
                            DueDate = new DateTime(2021, 4, 21, 2, 28, 6, 646, DateTimeKind.Local).AddTicks(6869),
                            Requirement = "Setup a client"
                        },
                        new
                        {
                            Id = 3,
                            AssignmentId = 1,
                            DateCreated = new DateTime(2021, 4, 15, 2, 28, 6, 646, DateTimeKind.Local).AddTicks(6873),
                            DueDate = new DateTime(2021, 4, 22, 2, 28, 6, 646, DateTimeKind.Local).AddTicks(6875),
                            Requirement = "Test your application"
                        });
                });

            modelBuilder.Entity("ASPectLibrary.ProjectRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("ProjectRoles");

                    b.HasData(
                        new
                        {
                            Id = "Arch",
                            RoleName = "Software Architect"
                        },
                        new
                        {
                            Id = "DBA",
                            RoleName = "Database Administrator"
                        },
                        new
                        {
                            Id = "UIUIX",
                            RoleName = "UI/UX Designer"
                        },
                        new
                        {
                            Id = "SD",
                            RoleName = "Software Developer"
                        },
                        new
                        {
                            Id = "PM",
                            RoleName = "Project Manager"
                        },
                        new
                        {
                            Id = "SA",
                            RoleName = "System Administrator"
                        },
                        new
                        {
                            Id = "FE",
                            RoleName = "Front End Developer"
                        },
                        new
                        {
                            Id = "BE",
                            RoleName = "Back End Developer"
                        },
                        new
                        {
                            Id = "QA",
                            RoleName = "Quality Assurance"
                        },
                        new
                        {
                            Id = "TE",
                            RoleName = "Software Tester"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "5bb3f1ca-d27c-4655-b8d6-6c2b3016f2d3",
                            RoleId = "fe7dce26-ec5d-452a-8d5b-db9fdf6c7de8"
                        },
                        new
                        {
                            UserId = "9216a976-f1ba-4d73-aff6-f818b4b5c6a7",
                            RoleId = "6fe5c0a6-9713-43c2-90e2-a1bbdc670580"
                        },
                        new
                        {
                            UserId = "363624a6-0978-4866-b5ee-b135a6fc3870",
                            RoleId = "c5b86ef1-3114-4dc7-a061-1bc704939396"
                        },
                        new
                        {
                            UserId = "363624a6-1111-4866-b5ee-b135a6fc3870",
                            RoleId = "c5b86ef1-3114-4dc7-a061-1bc704939396"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ASPectLibrary.Assignment", b =>
                {
                    b.HasOne("ASPectLibrary.Course", "Course")
                        .WithMany("Assignments")
                        .HasForeignKey("courseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("ASPectLibrary.Course", b =>
                {
                    b.HasOne("ASPectLibrary.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("Id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ASPectLibrary.Enrollment", b =>
                {
                    b.HasOne("ASPectLibrary.Course", null)
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseID");

                    b.HasOne("ASPectLibrary.ApplicationUser", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("Id");

                    b.HasOne("ASPectLibrary.Offering", "Offering")
                        .WithMany()
                        .HasForeignKey("OfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offering");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ASPectLibrary.Membership", b =>
                {
                    b.HasOne("ASPectLibrary.Course", null)
                        .WithMany("Memberships")
                        .HasForeignKey("CourseID");

                    b.HasOne("ASPectLibrary.ApplicationUser", "Student")
                        .WithMany("Memberships")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPectLibrary.Project", "Project")
                        .WithMany("Memberships")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("ASPectLibrary.Offering", b =>
                {
                    b.HasOne("ASPectLibrary.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPectLibrary.ApplicationUser", "Instructor")
                        .WithMany("Offerings")
                        .HasForeignKey("Id");

                    b.Navigation("Course");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("ASPectLibrary.PeerEvaluation", b =>
                {
                    b.HasOne("ASPectLibrary.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPectLibrary.ApplicationUser", "UserBeingEvaluated")
                        .WithMany()
                        .HasForeignKey("UserBeingEvaluatedId");

                    b.HasOne("ASPectLibrary.ApplicationUser", "UserEvaluating")
                        .WithMany()
                        .HasForeignKey("UserEvaluatingId");

                    b.Navigation("Project");

                    b.Navigation("UserBeingEvaluated");

                    b.Navigation("UserEvaluating");
                });

            modelBuilder.Entity("ASPectLibrary.ProgressUpdate", b =>
                {
                    b.HasOne("ASPectLibrary.Project", "Project")
                        .WithMany("ProgressUpdates")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ASPectLibrary.Project", b =>
                {
                    b.HasOne("ASPectLibrary.Offering", "Offering")
                        .WithMany("Projects")
                        .HasForeignKey("OfferingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPectLibrary.ProjectCategory", "ProjectCategory")
                        .WithMany()
                        .HasForeignKey("ProjectCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Offering");

                    b.Navigation("ProjectCategory");
                });

            modelBuilder.Entity("ASPectLibrary.ProjectRequirement", b =>
                {
                    b.HasOne("ASPectLibrary.Assignment", "Assignment")
                        .WithMany()
                        .HasForeignKey("AssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignment");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("ASPectLibrary.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ASPectLibrary.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ASPectLibrary.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("ASPectLibrary.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ASPectLibrary.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ASPectLibrary.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ASPectLibrary.ApplicationUser", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("Memberships");

                    b.Navigation("Offerings");
                });

            modelBuilder.Entity("ASPectLibrary.Course", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Enrollments");

                    b.Navigation("Memberships");
                });

            modelBuilder.Entity("ASPectLibrary.Offering", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ASPectLibrary.Project", b =>
                {
                    b.Navigation("Memberships");

                    b.Navigation("ProgressUpdates");
                });
#pragma warning restore 612, 618
        }
    }
}
